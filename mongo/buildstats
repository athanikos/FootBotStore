
db.events.updateMany({},{$unset:{AwayTeamStats:""}  })
db.events.updateMany({},{$unset:{HomeTeamStats:""}  })
db.events.updateMany({},{$unset:{stats:""}  })

var inputLeagueName = "Eredivisie";


db.events.find({league_name:inputLeagueName}).sort({ startingat:1 }).forEach((it)=> { 
   var team1 = it.hometeamname;
   var team2 = it.awayteamname;
   var dt = it.startingat;
   var HomeTeamhistoricalMatches = db.events.find( {$and:  [{$or:[{hometeamname:team1} ,{awayteamname:team1}]}, {startingat:{$lt:it.startingat}}, {league_name:inputLeagueName}  ]  } ).sort({ startingat:-1 }).limit(5);
   var AwayTeamhistoricalMatches = db.events.find( {$and:  [{$or:[{hometeamname:team2} ,{awayteamname:team2}]}, {startingat:{$lt:it.startingat}}, {league_name:inputLeagueName}  ]  } ).sort({ startingat:-1 }).limit(5);

   var HomeTeamMatchNumber =   getMatchNumber(it.startingat,HomeTeamhistoricalMatches);
   db.events.update({_id:it._id},{$set:{"MatchNumber":HomeTeamMatchNumber}});
        
        
    var AvgGoalsScoredUpTo75 = 0;
    var AvgGoalsConcededUpTo75 = 0;
    var AvgGoalsConceded = 0;
    var AvgGoalsScored = 0;
      
    HomeTeamhistoricalMatches.forEach((historicalMatch)=> 
    { 

         
         AvgGoalsScoredUpTo75 +=historicalMatch.homeGoalsUpTo75;
         AvgGoalsConcededUpTo75 += historicalMatch.awayGoalsUpTo75;
         AvgGoalsConceded += historicalMatch.finalHomeGoals;
         AvgGoalsScored +=historicalMatch.finalAwayGoals ;
        
    
        
        db.events.update({_id:it._id},{$push : { HomeTeamStats: {"Date":historicalMatch.startingat,
                                                         "PlaysAtHomeOrAway":"H",
                                                         "GoalsScoredUpTo75":historicalMatch.homeGoalsUpTo75, 
                                                         "GoalsConcededUpTo75":historicalMatch.awayGoalsUpTo75,
                                                         "GoalsScored":historicalMatch.finalHomeGoals,
                                                         "GoalsConceded":historicalMatch.finalAwayGoals,  
                                                         "ResultAt75":historicalMatch.resultAt75,
                                                         "MatchNumber":historicalMatch.MatchNumber
                                                }
                                      } 
                         }
                        );
                        
    });
    

        AvgGoalsScoredUpTo75 = AvgGoalsScoredUpTo75/HomeTeamhistoricalMatches.count();
        AvgGoalsConcededUpTo75 = AvgGoalsConcededUpTo75/HomeTeamhistoricalMatches.count();
        AvgGoalsConceded =AvgGoalsConceded/HomeTeamhistoricalMatches.count();
        AvgGoalsScored =AvgGoalsScored/HomeTeamhistoricalMatches.count();
        
        db.events.update({_id:it._id},
        {$set:
        {
            "HomeAvgGoalsScoredUpTo75":AvgGoalsScoredUpTo75,
             "HomeAvgGoalsConcededUpTo75":AvgGoalsConcededUpTo75,
             "HomeAvgGoalsConceded":AvgGoalsConceded,
             "HomeAvgGoalsScored":AvgGoalsScored,
    
        }});

         AvgGoalsScoredUpTo75 = 0;
         AvgGoalsConcededUpTo75 = 0;
         AvgGoalsConceded =0;
         AvgGoalsScored =0;
    
    AwayTeamhistoricalMatches.forEach((historicalMatch)=> 
    { 
        
         
        AvgGoalsScoredUpTo75 +=historicalMatch.awayGoalsUpTo75;
        AvgGoalsConcededUpTo75 += historicalMatch.homeGoalsUpTo75;
        AvgGoalsConceded += historicalMatch.finalHomeGoals;
        AvgGoalsScored +=historicalMatch.finalAwayGoals ;
        
    
        db.events.update({_id:it._id},{$push : { AwayTeamStats: {"Date":historicalMatch.startingat,
                                                         "PlaysAtHomeOrAway":"A",
                                                         "GoalsScoredUpTo75":historicalMatch.awayGoalsUpTo75, 
                                                         "GoalsConcededUpTo75":historicalMatch.homeGoalsUpTo75,
                                                         "GoalsScored":historicalMatch.finalAwayGoals,
                                                         "GoalsConceded":historicalMatch.finalHomeGoals, 
                                                         "ResultAt75":historicalMatch.resultAt75,
                                                         "MatchNumber":historicalMatch.MatchNumber
                                                   }
                                           }
                              }
                             );   
                    
    });

        AvgGoalsScoredUpTo75 = AvgGoalsScoredUpTo75/AwayTeamhistoricalMatches.count();
        AvgGoalsConcededUpTo75 = AvgGoalsConcededUpTo75/AwayTeamhistoricalMatches.count();
        AvgGoalsConceded =AvgGoalsConceded/AwayTeamhistoricalMatches.count();
        AvgGoalsScored =AvgGoalsScored/AwayTeamhistoricalMatches.count();
    
        db.events.update({_id:it._id},
        {$set:
        {
             "AwayAvgGoalsScoredUpTo75":AvgGoalsScoredUpTo75,
             "AwayAvgGoalsConcededUpTo75":AvgGoalsConcededUpTo75,
             "AwayAvgGoalsConceded":AvgGoalsConceded,
             "AwayAvgGoalsScored":AvgGoalsScored,
    
        }});

    
});



function  getMatchNumber(currentDate, games)
{
    
    if (games===null)
        return 1;
    
    if (games.count()==0)
        return 1;

    var thegame = games[0];  
   
  
    var dt1 = new Date(currentDate);
    var dt2 = new Date(thegame.startingat);
    var days = Math.floor((Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) - Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate()) ) /(1000 * 60 * 60 * 24));

    if (days<-45)
        return 1;
  
    return thegame.MatchNumber+1;
}

